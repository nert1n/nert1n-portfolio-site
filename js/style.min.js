/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/dynamicAdapt.js":
/*!********************************!*\
  !*** ./src/js/dynamicAdapt.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useDynamicAdapt\": () => (/* binding */ useDynamicAdapt)\n/* harmony export */ });\n/**\r\n * @typedef {Object} dNode\r\n * @property {HTMLElement} parent\r\n * @property {HTMLElement} element\r\n * @property {HTMLElement} to\r\n * @property {string} breakpoint\r\n * @property {string} order\r\n * @property {number} index\r\n */\r\n\r\n/**\r\n * @typedef {Object} dMediaQuery\r\n * @property {string} query\r\n * @property {number} breakpoint\r\n */\r\n\r\n/**\r\n * @param {'min' | 'max'} type\r\n */\r\nfunction useDynamicAdapt(type = 'max') {\r\n   const className = '_dynamic_adapt_'\r\n   const attrName = 'data-da'\r\n\r\n   /** @type {dNode[]} */\r\n   const dNodes = getDNodes()\r\n\r\n   /** @type {dMediaQuery[]} */\r\n   const dMediaQueries = getDMediaQueries(dNodes)\r\n\r\n   dMediaQueries.forEach((dMediaQuery) => {\r\n      const matchMedia = window.matchMedia(dMediaQuery.query)\r\n      // массив объектов с подходящим брейкпоинтом\r\n      const filteredDNodes = dNodes.filter(({ breakpoint }) => breakpoint === dMediaQuery.breakpoint)\r\n      const mediaHandler = getMediaHandler(matchMedia, filteredDNodes)\r\n      matchMedia.addEventListener('change', mediaHandler)\r\n\r\n      mediaHandler()\r\n   })\r\n\r\n   function getDNodes() {\r\n      const result = []\r\n      const elements = [...document.querySelectorAll(`[${attrName}]`)]\r\n\r\n      elements.forEach((element) => {\r\n         const attr = element.getAttribute(attrName)\r\n         const [toSelector, breakpoint, order] = attr.split(',').map((val) => val.trim())\r\n\r\n         const to = document.querySelector(toSelector)\r\n\r\n         if (to) {\r\n            result.push({\r\n               parent: element.parentElement,\r\n               element,\r\n               to,\r\n               breakpoint: breakpoint ?? '767',\r\n               order: order !== undefined ? (isNumber(order) ? Number(order) : order) : 'last',\r\n               index: -1,\r\n            })\r\n         }\r\n      })\r\n\r\n      return sortDNodes(result)\r\n   }\r\n\r\n   /**\r\n    * @param {dNode} items\r\n    * @returns {dMediaQuery[]}\r\n    */\r\n   function getDMediaQueries(items) {\r\n      const uniqItems = [...new Set(items.map(({ breakpoint }) => `(${type}-width: ${breakpoint}px),${breakpoint}`))]\r\n\r\n      return uniqItems.map((item) => {\r\n         const [query, breakpoint] = item.split(',')\r\n\r\n         return { query, breakpoint }\r\n      })\r\n   }\r\n\r\n   /**\r\n    * @param {MediaQueryList} matchMedia\r\n    * @param {dNodes} items\r\n    */\r\n   function getMediaHandler(matchMedia, items) {\r\n      return function mediaHandler() {\r\n         if (matchMedia.matches) {\r\n            items.forEach((item) => {\r\n               moveTo(item)\r\n            })\r\n\r\n            items.reverse()\r\n         } else {\r\n            items.forEach((item) => {\r\n               if (item.element.classList.contains(className)) {\r\n                  moveBack(item)\r\n               }\r\n            })\r\n\r\n            items.reverse()\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @param {dNode} dNode\r\n    */\r\n   function moveTo(dNode) {\r\n      const { to, element, order } = dNode\r\n      dNode.index = getIndexInParent(dNode.element, dNode.element.parentElement)\r\n      element.classList.add(className)\r\n\r\n      if (order === 'last' || order >= to.children.length) {\r\n         to.append(element)\r\n\r\n         return\r\n      }\r\n\r\n      if (order === 'first') {\r\n         to.prepend(element)\r\n\r\n         return\r\n      }\r\n\r\n      to.children[order].before(element)\r\n   }\r\n\r\n   /**\r\n    * @param {dNode} dNode\r\n    */\r\n   function moveBack(dNode) {\r\n      const { parent, element, index } = dNode\r\n      element.classList.remove(className)\r\n\r\n      if (index >= 0 && parent.children[index]) {\r\n         parent.children[index].before(element)\r\n      } else {\r\n         parent.append(element)\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @param {HTMLElement} element\r\n    * @param {HTMLElement} parent\r\n    */\r\n   function getIndexInParent(element, parent) {\r\n      return [...parent.children].indexOf(element)\r\n   }\r\n\r\n   /**\r\n    * Функция сортировки массива по breakpoint и order\r\n    * по возрастанию для type = min\r\n    * по убыванию для type = max\r\n    *\r\n    * @param {dNode[]} items\r\n    */\r\n   function sortDNodes(items) {\r\n      const isMin = type === 'min' ? 1 : 0\r\n\r\n      return [...items].sort((a, b) => {\r\n         if (a.breakpoint === b.breakpoint) {\r\n            if (a.order === b.order) {\r\n               return 0\r\n            }\r\n\r\n            if (a.order === 'first' || b.order === 'last') {\r\n               return -1 * isMin\r\n            }\r\n\r\n            if (a.order === 'last' || b.order === 'first') {\r\n               return 1 * isMin\r\n            }\r\n\r\n            return 0\r\n         }\r\n\r\n         return (a.breakpoint - b.breakpoint) * isMin\r\n      })\r\n   }\r\n\r\n   function isNumber(value) {\r\n      return !isNaN(value)\r\n   }\r\n}\n\n//# sourceURL=webpack://example/./src/js/dynamicAdapt.js?");

/***/ }),

/***/ "./src/js/dynamicAdapt_dev-preserve-order.js":
/*!***************************************************!*\
  !*** ./src/js/dynamicAdapt_dev-preserve-order.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nclass DynamicAdapt {\r\n   constructor(type) {\r\n      this.type = type\r\n   }\r\n\r\n   init() {\r\n      // массив объектов\r\n      this.оbjects = []\r\n      this.daClassname = '_dynamic_adapt_'\r\n      // массив DOM-элементов\r\n      this.nodes = [...document.querySelectorAll('[data-da]')]\r\n\r\n      // наполнение оbjects объктами\r\n      this.nodes.forEach((node) => {\r\n         const data = node.dataset.da.trim()\r\n         const dataArray = data.split(',')\r\n         const оbject = {}\r\n         оbject.element = node\r\n         оbject.parent = node.parentNode\r\n         оbject.destination = document.querySelector(`${dataArray[0].trim()}`)\r\n         оbject.breakpoint = dataArray[1] ? dataArray[1].trim() : '767'\r\n         оbject.place = dataArray[2] ? dataArray[2].trim() : 'last'\r\n         оbject.index = this.indexInParent(оbject.parent, оbject.element)\r\n         this.оbjects.push(оbject)\r\n      })\r\n\r\n      this.arraySort(this.оbjects)\r\n\r\n      // массив уникальных медиа-запросов\r\n      this.mediaQueries = this.оbjects\r\n         .map(({ breakpoint }) => `(${this.type}-width: ${breakpoint}px),${breakpoint}`)\r\n         .filter((item, index, self) => self.indexOf(item) === index)\r\n\r\n      // навешивание слушателя на медиа-запрос\r\n      // и вызов обработчика при первом запуске\r\n      this.mediaQueries.forEach((media) => {\r\n         const mediaSplit = media.split(',')\r\n         const matchMedia = window.matchMedia(mediaSplit[0])\r\n         const mediaBreakpoint = mediaSplit[1]\r\n\r\n         // массив объектов с подходящим брейкпоинтом\r\n         const оbjectsFilter = this.оbjects.filter(({ breakpoint }) => breakpoint === mediaBreakpoint)\r\n         matchMedia.addEventListener('change', () => {\r\n            this.mediaHandler(matchMedia, оbjectsFilter)\r\n         })\r\n         this.mediaHandler(matchMedia, оbjectsFilter)\r\n      })\r\n   }\r\n\r\n   // Основная функция\r\n   mediaHandler(matchMedia, оbjects) {\r\n      if (matchMedia.matches) {\r\n         оbjects.forEach((оbject) => {\r\n            // оbject.index = this.indexInParent(оbject.parent, оbject.element);\r\n            this.moveTo(оbject.place, оbject.element, оbject.destination)\r\n         })\r\n      } else {\r\n         оbjects.forEach(({ parent, element, index }) => {\r\n            if (element.classList.contains(this.daClassname)) {\r\n               this.moveBack(parent, element, index)\r\n            }\r\n         })\r\n      }\r\n   }\r\n\r\n   // Функция перемещения\r\n   moveTo(place, element, destination) {\r\n      element.classList.add(this.daClassname)\r\n      if (place === 'last' || place >= destination.children.length) {\r\n         destination.append(element)\r\n         return\r\n      }\r\n      if (place === 'first') {\r\n         destination.prepend(element)\r\n         return\r\n      }\r\n      destination.children[place].before(element)\r\n   }\r\n\r\n   // Функция возврата\r\n   moveBack(parent, element, index) {\r\n      element.classList.remove(this.daClassname)\r\n      if (parent.children[index] !== undefined) {\r\n         parent.children[index].before(element)\r\n      } else {\r\n         parent.append(element)\r\n      }\r\n   }\r\n\r\n   // Функция получения индекса внутри родителя\r\n   indexInParent(parent, element) {\r\n      return [...parent.children].indexOf(element)\r\n   }\r\n\r\n   // Функция сортировки массива по breakpoint и place\r\n   // по возрастанию для this.type = min\r\n   // по убыванию для this.type = max\r\n   arraySort(arr) {\r\n      if (this.type === 'min') {\r\n         arr.sort((a, b) => {\r\n            if (a.breakpoint === b.breakpoint) {\r\n               if (a.place === b.place) {\r\n                  return 0\r\n               }\r\n               if (a.place === 'first' || b.place === 'last') {\r\n                  return -1\r\n               }\r\n               if (a.place === 'last' || b.place === 'first') {\r\n                  return 1\r\n               }\r\n               return 0\r\n            }\r\n            return a.breakpoint - b.breakpoint\r\n         })\r\n      } else {\r\n         arr.sort((a, b) => {\r\n            if (a.breakpoint === b.breakpoint) {\r\n               if (a.place === b.place) {\r\n                  return 0\r\n               }\r\n               if (a.place === 'first' || b.place === 'last') {\r\n                  return 1\r\n               }\r\n               if (a.place === 'last' || b.place === 'first') {\r\n                  return -1\r\n               }\r\n               return 0\r\n            }\r\n            return b.breakpoint - a.breakpoint\r\n         })\r\n         return\r\n      }\r\n   }\r\n}\n\n//# sourceURL=webpack://example/./src/js/dynamicAdapt_dev-preserve-order.js?");

/***/ }),

/***/ "./src/js/dynamicAdapt_dev.js":
/*!************************************!*\
  !*** ./src/js/dynamicAdapt_dev.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nclass DynamicAdapt {\r\n   constructor(type) {\r\n      this.type = type\r\n   }\r\n\r\n   init() {\r\n      // массив объектов\r\n      this.оbjects = []\r\n      this.daClassname = '_dynamic_adapt_'\r\n      // массив DOM-элементов\r\n      this.nodes = [...document.querySelectorAll('[data-da]')]\r\n\r\n      // наполнение оbjects объктами\r\n      this.nodes.forEach((node) => {\r\n         const data = node.dataset.da.trim()\r\n         const dataArray = data.split(',')\r\n         const оbject = {}\r\n         оbject.element = node\r\n         оbject.parent = node.parentNode\r\n         оbject.destination = document.querySelector(`${dataArray[0].trim()}`)\r\n         оbject.breakpoint = dataArray[1] ? dataArray[1].trim() : '767'\r\n         оbject.place = dataArray[2] ? dataArray[2].trim() : 'last'\r\n         оbject.index = this.indexInParent(оbject.parent, оbject.element)\r\n         this.оbjects.push(оbject)\r\n      })\r\n\r\n      this.arraySort(this.оbjects)\r\n\r\n      // массив уникальных медиа-запросов\r\n      this.mediaQueries = this.оbjects\r\n         .map(({ breakpoint }) => `(${this.type}-width: ${breakpoint}px),${breakpoint}`)\r\n         .filter((item, index, self) => self.indexOf(item) === index)\r\n\r\n      // навешивание слушателя на медиа-запрос\r\n      // и вызов обработчика при первом запуске\r\n      this.mediaQueries.forEach((media) => {\r\n         const mediaSplit = media.split(',')\r\n         const matchMedia = window.matchMedia(mediaSplit[0])\r\n         const mediaBreakpoint = mediaSplit[1]\r\n\r\n         // массив объектов с подходящим брейкпоинтом\r\n         const оbjectsFilter = this.оbjects.filter(({ breakpoint }) => breakpoint === mediaBreakpoint)\r\n         matchMedia.addEventListener('change', () => {\r\n            this.mediaHandler(matchMedia, оbjectsFilter)\r\n         })\r\n         this.mediaHandler(matchMedia, оbjectsFilter)\r\n      })\r\n   }\r\n\r\n   // Основная функция\r\n   mediaHandler(matchMedia, оbjects) {\r\n      if (matchMedia.matches) {\r\n         оbjects.forEach((оbject) => {\r\n            // оbject.index = this.indexInParent(оbject.parent, оbject.element);\r\n            this.moveTo(оbject.place, оbject.element, оbject.destination)\r\n         })\r\n      } else {\r\n         оbjects.forEach(({ parent, element, index }) => {\r\n            if (element.classList.contains(this.daClassname)) {\r\n               this.moveBack(parent, element, index)\r\n            }\r\n         })\r\n      }\r\n   }\r\n\r\n   // Функция перемещения\r\n   moveTo(place, element, destination) {\r\n      element.classList.add(this.daClassname)\r\n      if (place === 'last' || place >= destination.children.length) {\r\n         destination.append(element)\r\n         return\r\n      }\r\n      if (place === 'first') {\r\n         destination.prepend(element)\r\n         return\r\n      }\r\n      destination.children[place].before(element)\r\n   }\r\n\r\n   // Функция возврата\r\n   moveBack(parent, element, index) {\r\n      element.classList.remove(this.daClassname)\r\n      if (parent.children[index] !== undefined) {\r\n         parent.children[index].before(element)\r\n      } else {\r\n         parent.append(element)\r\n      }\r\n   }\r\n\r\n   // Функция получения индекса внутри родителя\r\n   indexInParent(parent, element) {\r\n      return [...parent.children].indexOf(element)\r\n   }\r\n\r\n   // Функция сортировки массива по breakpoint и place\r\n   // по возрастанию для this.type = min\r\n   // по убыванию для this.type = max\r\n   arraySort(arr) {\r\n      if (this.type === 'min') {\r\n         arr.sort((a, b) => {\r\n            if (a.breakpoint === b.breakpoint) {\r\n               if (a.place === b.place) {\r\n                  return 0\r\n               }\r\n               if (a.place === 'first' || b.place === 'last') {\r\n                  return -1\r\n               }\r\n               if (a.place === 'last' || b.place === 'first') {\r\n                  return 1\r\n               }\r\n               return 0\r\n            }\r\n            return a.breakpoint - b.breakpoint\r\n         })\r\n      } else {\r\n         arr.sort((a, b) => {\r\n            if (a.breakpoint === b.breakpoint) {\r\n               if (a.place === b.place) {\r\n                  return 0\r\n               }\r\n               if (a.place === 'first' || b.place === 'last') {\r\n                  return 1\r\n               }\r\n               if (a.place === 'last' || b.place === 'first') {\r\n                  return -1\r\n               }\r\n               return 0\r\n            }\r\n            return b.breakpoint - a.breakpoint\r\n         })\r\n         return\r\n      }\r\n   }\r\n}\n\n//# sourceURL=webpack://example/./src/js/dynamicAdapt_dev.js?");

/***/ }),

/***/ "./src/js/style.js":
/*!*************************!*\
  !*** ./src/js/style.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_js_dynamicAdapt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../src/js/dynamicAdapt.js */ \"./src/js/dynamicAdapt.js\");\n// How to use\r\n// data-da=\"куда,когда,какой\"\r\n\r\n(0,_src_js_dynamicAdapt_js__WEBPACK_IMPORTED_MODULE_0__.useDynamicAdapt)()\r\n\r\ndocument.querySelector('.burger').addEventListener('click', function () {\r\n   document.querySelector('.burger').classList.toggle('active');\r\n   document.querySelector('.header__').classList.toggle('active');\r\n   document.querySelector('.header__').classList.toggle('color');\r\n})\r\n\r\n// ТАБИ\r\n\r\nclass ItcTabs {\r\n   constructor(target, config) {\r\n      const defaultConfig = {};\r\n      this._config = Object.assign(defaultConfig, config);\r\n      this._elTabs = typeof target === 'string' ? document.querySelector(target) : target;\r\n      this._elButtons = this._elTabs.querySelectorAll('.tabs__btn');\r\n      this._elPanes = this._elTabs.querySelectorAll('.tabs__pane');\r\n      this._eventShow = new Event('tab.itc.change');\r\n      this._init();\r\n      this._events();\r\n   }\r\n   _init() {\r\n      this._elTabs.setAttribute('role', 'tablist');\r\n      this._elButtons.forEach((el, index) => {\r\n         el.dataset.index = index;\r\n         el.setAttribute('role', 'tab');\r\n         this._elPanes[index].setAttribute('role', 'tabpanel');\r\n      });\r\n   }\r\n   show(elLinkTarget) {\r\n      const elPaneTarget = this._elPanes[elLinkTarget.dataset.index];\r\n      const elLinkActive = this._elTabs.querySelector('.tabs__btn_active');\r\n      const elPaneShow = this._elTabs.querySelector('.tabs__pane_show');\r\n      if (elLinkTarget === elLinkActive) {\r\n         return;\r\n      }\r\n      elLinkActive ? elLinkActive.classList.remove('tabs__btn_active') : null;\r\n      elPaneShow ? elPaneShow.classList.remove('tabs__pane_show') : null;\r\n      elLinkTarget.classList.add('tabs__btn_active');\r\n      elPaneTarget.classList.add('tabs__pane_show');\r\n      this._elTabs.dispatchEvent(this._eventShow);\r\n      elLinkTarget.focus();\r\n   }\r\n   showByIndex(index) {\r\n      const elLinkTarget = this._elButtons[index];\r\n      elLinkTarget ? this.show(elLinkTarget) : null;\r\n   };\r\n   _events() {\r\n      this._elTabs.addEventListener('click', (e) => {\r\n         const target = e.target.closest('.tabs__btn');\r\n         if (target) {\r\n            e.preventDefault();\r\n            this.show(target);\r\n         }\r\n      });\r\n   }\r\n}\r\n\r\nnew ItcTabs('.tabs');\n\n//# sourceURL=webpack://example/./src/js/style.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./src/js/dynamicAdapt.js");
/******/ 	__webpack_require__("./src/js/dynamicAdapt_dev-preserve-order.js");
/******/ 	__webpack_require__("./src/js/dynamicAdapt_dev.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/style.js");
/******/ 	
/******/ })()
;